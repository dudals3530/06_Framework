
CREATE TABLE "MEMBER" (
	"MEMBER_NO"	NUMBER		NOT NULL,
	"MEMBER_EMAIL"	NVARCHAR2(50)		NOT NULL, 
	"MEMBER_PW"	NVARCHAR2(100)		NOT NULL,
	"MEMBER_NICKNAME"	NVARCHAR2(10)		NOT NULL,
	"MEMBER_TEL"	CHAR(11)		NOT NULL,
	"MEMBER_ADDRESS"	NVARCHAR2(300)		NULL,
	"PROFILE_IMG"	VARCHAR2(300)		NULL,
	"ENROLL_DATE"	DATE	DEFAULT SYSDATE	NOT NULL,
	"MEMBER_DEL_FL"	CHAR(1)	DEFAULT 'N'	NOT NULL,
	"AUTHORITY"	NUMBER	DEFAULT 1	NOT NULL
);

COMMENT ON COLUMN "MEMBER"."MEMBER_NO" IS '회원 번호(PK)';

COMMENT ON COLUMN "MEMBER"."MEMBER_EMAIL" IS '회원 이메일(ID 역할)';

COMMENT ON COLUMN "MEMBER"."MEMBER_PW" IS '회원 비밀번호(암호화)';

COMMENT ON COLUMN "MEMBER"."MEMBER_NICKNAME" IS '회원 닉네임';

COMMENT ON COLUMN "MEMBER"."MEMBER_TEL" IS '회원 전화 번호';

COMMENT ON COLUMN "MEMBER"."MEMBER_ADDRESS" IS '회원 주소';

COMMENT ON COLUMN "MEMBER"."PROFILE_IMG" IS '프로필 이미지';

COMMENT ON COLUMN "MEMBER"."ENROLL_DATE" IS '회원 가입일';

COMMENT ON COLUMN "MEMBER"."MEMBER_DEL_FL" IS '탈퇴 여부(Y,N)';

COMMENT ON COLUMN "MEMBER"."AUTHORITY" IS '권한(1:일반, 2:관리자)';

-- 회원 번호 시퀀스 만들기
CREATE SEQUENCE SEQ_MEMBER_NO NOCACHE;


-- 샘플 회원 데이터 삽입
INSERT INTO "MEMBER"
VALUES(SEQ_MEMBER_NO.NEXTVAL, 
			 'user01@kh.or.kr',
			 'pass01!',
			 '유저일',
			 '01012341234',
			 NULL,
			 NULL,
			 DEFAULT,
			 DEFAULT,
			 DEFAULT
);

COMMIT;

-- 25.04.21 여기까지 수행

SELECT * FROM "MEMBER";

-- 암호화된 비밀번호 (평문 : PASS01!) 업데이트
UPDATE "MEMBER" SET
MEMBER_PW = '$2a$10$1wpRFhUavpEuGPcQK7YOR.VaLRrJPWtd5EVmmfWmYI2BdH/GYommW'
WHERE MEMBER_NO = 1;

COMMIT;

-- 로그인 SQL
SELECT MEMBER_NO , MEMBER_EMAIL, MEMBER_NICKNAME,
MEMBER_PW, MEMBER_TEL, MEMBER_ADDRESS, PROFILE_IMG,
AUTHORITY,
TO_CHAR(ENROLL_DATE, 'YYYY"년" MM"월" DD"일" 
HH24"시" MI"분" SS"초"') ENROLL_DATE
FROM "MEMBER"
WHERE MEMBER_EMAIL = 'user01@kh.or.kr'
AND MEMBER_DEL_FL ='N';

	UPDATE "MEMBER" SET
  		MEMBER_NICKNAME = '유저3',
  		MEMBER_TEL = '01020324444',
  		MEMBER_ADDRESS = '서울시 중랑구 신내로 51',
  		WHERE MEMBER_NO = 1;



-----------------------------------------

/* 이메일, 인증키 저장 테이블 생성 */
CREATE TABLE "TB_AUTH_KEY"(
	"KEY_NO"    NUMBER PRIMARY KEY,
	"EMAIL"	    NVARCHAR2(50) NOT NULL,
	"AUTH_KEY"  CHAR(6)	NOT NULL,
	"CREATE_TIME" DATE DEFAULT SYSDATE NOT NULL
);

COMMENT ON COLUMN "TB_AUTH_KEY"."KEY_NO"      IS '인증키 구분 번호(시퀀스)';
COMMENT ON COLUMN "TB_AUTH_KEY"."EMAIL"       IS '인증 이메일';
COMMENT ON COLUMN "TB_AUTH_KEY"."AUTH_KEY"    IS '인증 번호';
COMMENT ON COLUMN "TB_AUTH_KEY"."CREATE_TIME" IS '인증 번호 생성 시간';

CREATE SEQUENCE SEQ_KEY_NO NOCACHE; -- 인증키 구분 번호 시퀀스


SELECT * FROM "TB_AUTH_KEY";
SELECT * FROM "MEMBER";


COMMIT;

	SELECT COUNT(*)
	FROM "MEMBER"
	WHERE MEMBER_EMAIL = 'user01@kh.or.kr'
	AND MEMBER_DEL_FL = 'N';
------------------------------------------


-- 파일 
CREATE TABLE "UPLOAD_FILE" (
	"FILE_NO"	NUMBER		NOT NULL,
	"FILE_PATH"	VARCHAR2(500)		NOT NULL,
	"FILE_ORIGINAL_NAME"	VARCHAR2(300)		NOT NULL,
	"FILE_RENAME"	VARCHAR2(100)		NOT NULL,
	"FILE_UPLOAD_DATE"	DATE	DEFAULT SYSDATE	NOT NULL,
	"MEMBER_NO"	NUMBER		NOT NULL
);

COMMENT ON COLUMN "UPLOAD_FILE"."FILE_NO" IS '파일 번호(PK)';

COMMENT ON COLUMN "UPLOAD_FILE"."FILE_PATH" IS '파일 요청 경로';

COMMENT ON COLUMN "UPLOAD_FILE"."FILE_ORIGINAL_NAME" IS '파일 원본명';

COMMENT ON COLUMN "UPLOAD_FILE"."FILE_RENAME" IS '파일 변경명';

COMMENT ON COLUMN "UPLOAD_FILE"."FILE_UPLOAD_DATE" IS '업로드 날짜';

COMMENT ON COLUMN "UPLOAD_FILE"."MEMBER_NO" IS '업로드한 회원 번호';
		
-- 시퀀스 SEQ_FILE_NO 생성		
CREATE SEQUENCE SEQ_FILE_NO NOCACHE;

SELECT * FROM "UPLOAD_FILE";

SELECT FILE_NO, FILE_PATH, FILE_ORIGINAL_NAME, FILE_RENAME,
MEMBER_NICKNAME,
TO_CHAR(FILE_UPLOAD_DATE, 'YYYY-MM-DD') FILE_UPLOAD_DATE
FROM "UPLOAD_FILE"
JOIN MEMBER ON ("UPLOAD_FILE".MEMBER_NO = "MEMBER".MEMBER_NO) 
WHERE "UPLOAD_FILE".MEMBER_NO = 1
ORDER BY FILE_NO DESC;


------------------------------------------

/* 게시판 테이블 생성 */
CREATE TABLE "BOARD" (
	"BOARD_NO"	NUMBER		NOT NULL,
	"BOARD_TITLE"	NVARCHAR2(100)		NOT NULL,
	"BOARD_CONTENT"	VARCHAR2(4000)		NOT NULL,
	"BOARD_WRITE_DATE"	DATE	DEFAULT SYSDATE	NOT NULL,
	"BOARD_UPDATE_DATE"	DATE		NULL,
	"READ_COUNT"	NUMBER	DEFAULT 0	NOT NULL,
	"BOARD_DEL_FL"	CHAR(1)	DEFAULT 'N'	NOT NULL,
	"BOARD_CODE"	NUMBER		NOT NULL,
	"MEMBER_NO"	NUMBER		NOT NULL
);


COMMENT ON COLUMN "BOARD"."BOARD_NO" IS '게시글 번호(PK)';

COMMENT ON COLUMN "BOARD"."BOARD_TITLE" IS '게시글 제목';

COMMENT ON COLUMN "BOARD"."BOARD_CONTENT" IS '게시글 내용';

COMMENT ON COLUMN "BOARD"."BOARD_WRITE_DATE" IS '게시글 작성일';

COMMENT ON COLUMN "BOARD"."BOARD_UPDATE_DATE" IS '게시글 마지막 수정일';

COMMENT ON COLUMN "BOARD"."READ_COUNT" IS '조회수';

COMMENT ON COLUMN "BOARD"."BOARD_DEL_FL" IS '게시글 삭제 여부(Y/N)';

COMMENT ON COLUMN "BOARD"."BOARD_CODE" IS '게시판 종류 코드 번호';

COMMENT ON COLUMN "BOARD"."MEMBER_NO" IS '작성한 회원 번호(FK)';


-- 게시판 종류 테이블
CREATE TABLE "BOARD_TYPE" (
	"BOARD_CODE"	NUMBER		NOT NULL,
	"BOARD_NAME"	NVARCHAR2(20)		NOT NULL
);

COMMENT ON COLUMN "BOARD_TYPE"."BOARD_CODE" IS '게시판 종류 코드 번호';
COMMENT ON COLUMN "BOARD_TYPE"."BOARD_NAME" IS '게시판명';

-- 게시판 좋아요 테이블
CREATE TABLE "BOARD_LIKE" (
	"MEMBER_NO"	NUMBER		NOT NULL,
	"BOARD_NO"	NUMBER		NOT NULL
);

COMMENT ON COLUMN "BOARD_LIKE"."MEMBER_NO" IS '회원 번호(PK)';
COMMENT ON COLUMN "BOARD_LIKE"."BOARD_NO" IS '게시글 번호(PK)';

-- 게시판 이미지 테이블
CREATE TABLE "BOARD_IMG" (
	"IMG_NO"	NUMBER		NOT NULL,
	"IMG_PATH"	VARCHAR2(200)		NOT NULL,
	"IMG_ORIGINAL_NAME"	NVARCHAR2(50)		NOT NULL,
	"IMG_RENAME"	NVARCHAR2(50)		NOT NULL,
	"IMG_ORDER"	NUMBER		NULL,
	"BOARD_NO"	NUMBER		NOT NULL
);

COMMENT ON COLUMN "BOARD_IMG"."IMG_NO" IS '이미지 번호(PK)';

COMMENT ON COLUMN "BOARD_IMG"."IMG_PATH" IS '이미지 요청 경로';

COMMENT ON COLUMN "BOARD_IMG"."IMG_ORIGINAL_NAME" IS '이미지 원본명';

COMMENT ON COLUMN "BOARD_IMG"."IMG_RENAME" IS '이미지 변경명';

COMMENT ON COLUMN "BOARD_IMG"."IMG_ORDER" IS '이미지 순서';

COMMENT ON COLUMN "BOARD_IMG"."BOARD_NO" IS '게시글 번호(PK)';


-- 댓글 테이블
CREATE TABLE "COMMENT" (
	"COMMENT_NO"	NUMBER		NOT NULL,
	"COMMENT_CONTENT"	VARCHAR2(4000)		NOT NULL,
	"COMMENT_WRITE_DATE"	DATE	DEFAULT SYSDATE	NOT NULL,
	"COMMENT_DEL_FL"	CHAR(1)	DEFAULT 'N'	NOT NULL,
	"BOARD_NO"	NUMBER		NOT NULL,
	"MEMBER_NO"	NUMBER		NOT NULL,
	"PARENT_COMMENT_NO"	NUMBER
);

COMMENT ON COLUMN "COMMENT"."COMMENT_NO" IS '댓글 번호(PK)';

COMMENT ON COLUMN "COMMENT"."COMMENT_CONTENT" IS '댓글 내용';

COMMENT ON COLUMN "COMMENT"."COMMENT_WRITE_DATE" IS '댓글 작성일';

COMMENT ON COLUMN "COMMENT"."COMMENT_DEL_FL" IS '댓글 삭제 여부(Y/N)';

COMMENT ON COLUMN "COMMENT"."BOARD_NO" IS '게시글 번호(PK)';

COMMENT ON COLUMN "COMMENT"."MEMBER_NO" IS '회원 번호(PK)';

COMMENT ON COLUMN "COMMENT"."PARENT_COMMENT_NO" IS '부모 댓글 번호';


--------------------- PK -----------------------

ALTER TABLE "MEMBER" ADD CONSTRAINT "PK_MEMBER" PRIMARY KEY (
	"MEMBER_NO"
); -- 수행함

ALTER TABLE "UPLOAD_FILE" ADD CONSTRAINT "PK_UPLOAD_FILE" PRIMARY KEY (
	"FILE_NO"
); -- 수행함

ALTER TABLE "BOARD" ADD CONSTRAINT "PK_BOARD" PRIMARY KEY (
	"BOARD_NO"
);

ALTER TABLE "BOARD_TYPE" ADD CONSTRAINT "PK_BOARD_TYPE" PRIMARY KEY (
	"BOARD_CODE"
);

ALTER TABLE "BOARD_LIKE" ADD CONSTRAINT "PK_BOARD_LIKE" PRIMARY KEY (
	"MEMBER_NO",
	"BOARD_NO"
);    -- PK 복합키 2개 => 즉 중복된 행이 올수가없다 . 

ALTER TABLE "BOARD_IMG" ADD CONSTRAINT "PK_BOARD_IMG" PRIMARY KEY (
	"IMG_NO"
);

ALTER TABLE "COMMENT" ADD CONSTRAINT "PK_COMMENT" PRIMARY KEY (
	"COMMENT_NO"
);


-------------------- FK -------------------------


ALTER TABLE "UPLOAD_FILE" ADD CONSTRAINT "FK_MEMBER_TO_UPLOAD_FILE_1" FOREIGN KEY (
	"MEMBER_NO"
)
REFERENCES "MEMBER" (
	"MEMBER_NO"
);



ALTER TABLE "BOARD" ADD CONSTRAINT "FK_BOARD_TYPE_TO_BOARD_1" FOREIGN KEY (
	"BOARD_CODE"
)
REFERENCES "BOARD_TYPE" (
	"BOARD_CODE"
);



ALTER TABLE "BOARD" ADD CONSTRAINT "FK_MEMBER_TO_BOARD_1" FOREIGN KEY (
	"MEMBER_NO"
)
REFERENCES "MEMBER" (
	"MEMBER_NO"
);



ALTER TABLE "BOARD_LIKE" ADD CONSTRAINT "FK_MEMBER_TO_BOARD_LIKE_1" FOREIGN KEY (
	"MEMBER_NO"
)
REFERENCES "MEMBER" (
	"MEMBER_NO"
);



ALTER TABLE "BOARD_LIKE" ADD CONSTRAINT "FK_BOARD_TO_BOARD_LIKE_1" FOREIGN KEY (
	"BOARD_NO"
)
REFERENCES "BOARD" (
	"BOARD_NO"
);


ALTER TABLE "BOARD_IMG" ADD CONSTRAINT "FK_BOARD_TO_BOARD_IMG_1" FOREIGN KEY (
	"BOARD_NO"
)
REFERENCES "BOARD" (
	"BOARD_NO"
);


ALTER TABLE "COMMENT" ADD CONSTRAINT "FK_BOARD_TO_COMMENT_1" FOREIGN KEY (
	"BOARD_NO"
)
REFERENCES "BOARD" (
	"BOARD_NO"
);


ALTER TABLE "COMMENT" ADD CONSTRAINT "FK_MEMBER_TO_COMMENT_1" FOREIGN KEY (
	"MEMBER_NO"
)
REFERENCES "MEMBER" (
	"MEMBER_NO"
);


ALTER TABLE "COMMENT" ADD CONSTRAINT "FK_COMMENT_TO_COMMENT_1" FOREIGN KEY (
	"PARENT_COMMENT_NO"
)
REFERENCES "COMMENT" (
	"COMMENT_NO"
);

---------------------- CHECK -----------------------

-- 회원 탈퇴 여부 CHECK 제약 조건 추가
ALTER TABLE "MEMBER" ADD
CONSTRAINT "MEMBER_DEL_CHECK"
CHECK("MEMBER_DEL_FL" IN ('Y','N') );
-- 수행함

-- 게시글 삭제 여부
ALTER TABLE "BOARD" ADD
CONSTRAINT "BOARD_DEL_CHECK"
CHECK("BOARD_DEL_FL" IN ('Y', 'N') );

-- 댓글 삭제 여부
ALTER TABLE "COMMENT" ADD
CONSTRAINT "COMMENT_DEL_CHECK"
CHECK("COMMENT_DEL_FL" IN ('Y', 'N') );

-- 4/28 수행함
	
/* 게시판 종류(BOARD_TYPE) 추가 */
CREATE SEQUENCE SEQ_BOARD_CODE NOCACHE;

INSERT INTO "BOARD_TYPE" VALUES(SEQ_BOARD_CODE.NEXTVAL, '공지 게시판');
INSERT INTO "BOARD_TYPE" VALUES(SEQ_BOARD_CODE.NEXTVAL, '정보 게시판');
INSERT INTO "BOARD_TYPE" VALUES(SEQ_BOARD_CODE.NEXTVAL, '자유 게시판');

COMMIT;

SELECT * FROM BOARD_TYPE;

---------------------------------------------
/* 게시글 번호 시퀀스 생성 */
CREATE SEQUENCE SEQ_BOARD_NO NOCACHE; 


BEGIN
	FOR I IN 1..2000 LOOP
		
		INSERT INTO "BOARD"
		VALUES(SEQ_BOARD_NO.NEXTVAL,
					 SEQ_BOARD_NO.CURRVAL || '번째 게시글',
					 SEQ_BOARD_NO.CURRVAL || '번째 게시글 내용 입니다',
					 DEFAULT, DEFAULT, DEFAULT, DEFAULT,
					 CEIL( DBMS_RANDOM.VALUE(0,3) ),
					 4 -- 회원번호 dudals3530 래몬이 에다가넣어버려
		);
		
	END LOOP;
END;

COMMIT;


SELECT * FROM "BOARD";
SELECT * FROM MEMBER;
---------------------------------------------------
-- 부모 댓글 번호 NULL 허용


/* 댓글 번호 시퀀스 생성 */
CREATE SEQUENCE SEQ_COMMENT_NO NOCACHE;

/* 댓글 ("COMMNET") 테이블에 샘플 데이터 추가*/

BEGIN
	FOR I IN 1..2000 LOOP
	
		INSERT INTO "COMMENT"	
		VALUES(
			SEQ_COMMENT_NO.NEXTVAL,
			SEQ_COMMENT_NO.CURRVAL || '번째 댓글 입니다',
			DEFAULT, DEFAULT,
			CEIL( DBMS_RANDOM.VALUE(0, 2000) ),
			4,
			NULL
		);
	END LOOP;
END;

COMMIT;
-- 4/28 수행함.

SELECT COUNT(*)
FROM "COMMENT" ;

-- 특정 게시판(BOARD_CODE)에 삭제되지 않은 게시글 목록 조회
-- 단 , 최신글이 제일 위에 존재하도록 조회
-- 작성일 : 몇 초 / 몇 분 / 몇 시간 전 YYYY-MM-DD 형식 조회

-- 게시글 번호 / 제목[댓글개수] / 작성자 닉네임/ 작성일 / 조회수 /좋아요 개수

-- 상관 서브쿼리
-- 1) 메인쿼리 1행 조회
-- 2) 1행 조회 결과를 이용해서 서브쿼리 수행
--     메인쿼리 모두 이용 될때까지 반복


SELECT BOARD_NO , BOARD_TITLE, READ_COUNT,M.MEMBER_NICKNAME , 
(SELECT COUNT(*) FROM "COMMENT" C
 WHERE C.BOARD_NO = B.BOARD_NO ) COMMENT_COUNT ,
 (SELECT COUNT(*) FROM "BOARD_LIKE" l 
 WHERE L.BOARD_NO  = B.BOARD_NO ) 
 
FROM "BOARD" B
JOIN "MEMBER" M ON(B.MEMBER_NO = M.MEMBER_NO)
WHERE B.BOARD_DEL_FL = 'N'
AND B.BOARD_CODE = 1
ORDER BY B.BOARD_NO DESC;




SELECT BOARD_CODE "boardCode", BOARD_NAME "boardName"
 		FROM BOARD_TYPE
 		ORDER BY BOARD_CODE;
-----------------------------------------------------

INSERT INTO "BOARD_IMG" 
(
 SELECT NEXT_IMG_NO(), '경로1' , '원본1', '변경1', 1, 2000 FROM DUAL
 UNION 
 SELECT NEXT_IMG_NO(), '경로2' , '원본2', '변경2', 2, 2000 FROM DUAL
 UNION 
 SELECT NEXT_IMG_NO(), '경로3' , '원본3', '변경3', 3, 2000 FROM DUAL
 );

SELECT * FROM "BOARD_IMG";


-- SEQ_IMG_NO 시퀀스의 다음값을 반환하는 함수 생성
CREATE OR REPLACE FUNCTION NEXT_IMG_NO

-- 반환형
RETURN NUMBER

--사용할 변수
IS IMG_NO NUMBER;

BEGIN
	SELECT SEQ_IMG_NO.NEXTVAL
	INTO IMG_NO
	FROM DUAL;

	RETURN IMG_NO;
END;



/* BOARD_IMG 테이블용 시퀀스 생성 */
CREATE SEQUENCE SEQ_IMG_NO NOCACHE;

/* BOARD_IMG 테이블에 샘플 데이터 삽입 */
INSERT INTO "BOARD_IMG" VALUES(
	SEQ_IMG_NO.NEXTVAL, '/images/board/', '원본1.jpg', 'test1.jpg', 0, 2000
);

INSERT INTO "BOARD_IMG" VALUES(
	SEQ_IMG_NO.NEXTVAL, '/images/board/', '원본2.jpg', 'test2.jpg', 1, 2000
);

INSERT INTO "BOARD_IMG" VALUES(
	SEQ_IMG_NO.NEXTVAL, '/images/board/', '원본3.jpg', 'test3.jpg', 2, 2000
);

INSERT INTO "BOARD_IMG" VALUES(
	SEQ_IMG_NO.NEXTVAL, '/images/board/', '원본4.jpg', 'test4.jpg', 3, 2000
);

INSERT INTO "BOARD_IMG" VALUES(
	SEQ_IMG_NO.NEXTVAL, '/images/board/', '원본5.jpg', 'test5.jpg', 4, 2000
);


COMMIT;

SELECT * FROM "BOARD_IMG";



SELECT * FROM "COMMENT"
ORDER BY COMMENT_NO DESC;


-- 댓글 샘플데이터
INSERT INTO "COMMENT"	
VALUES( SEQ_COMMENT_NO.NEXTVAL, '부모 댓글 1',
			  DEFAULT, DEFAULT,	2000, 1, NULL);
			 
INSERT INTO "COMMENT"	
VALUES( SEQ_COMMENT_NO.NEXTVAL, '부모 댓글 2',
			  DEFAULT, DEFAULT,	2000, 1, NULL);
			 
INSERT INTO "COMMENT"	
VALUES( SEQ_COMMENT_NO.NEXTVAL, '부모 댓글 3',
			  DEFAULT, DEFAULT,	2000, 1, NULL);

-- 부모 댓글 1의 자식 댓글
INSERT INTO "COMMENT"	
VALUES( SEQ_COMMENT_NO.NEXTVAL, '부모 1의 자식 1',
			  DEFAULT, DEFAULT,	2000, 4, 2020);
			 
INSERT INTO "COMMENT"	
VALUES( SEQ_COMMENT_NO.NEXTVAL, '부모 1의 자식 2',
			  DEFAULT, DEFAULT,	2000, 4, 2020);
			 
			 
-- 부모 댓글 2의 자식 댓글			 
INSERT INTO "COMMENT"	
VALUES( SEQ_COMMENT_NO.NEXTVAL, '부모 2의 자식 1',
			  DEFAULT, DEFAULT,	2000, 4, 2021);
			 
-- 부모 댓글 2의 자식 1의 자식 댓글			 
INSERT INTO "COMMENT"	
VALUES( SEQ_COMMENT_NO.NEXTVAL, '부모 2의 자식 1의 자식!!!',
			  DEFAULT, DEFAULT,	2000, 4, 2028);

			 
COMMIT;

SELECT COUNT(*)
FROM BOARD_LIKE
WHERE BOARD_NO = 1997;

INSERT INTO BOARD_LIKE
VALUES(5,1997); -- 1번 회언이 1994번 게시글에 좋아요를 누름

--좋아요 여부 확인 (1 : o / 0 : x)
SELECT COUNT(*) FROM BOARD_LIKE
WHERE BOARD_NO = 1997
AND MEMBER_NO = 5;

-- 게시글 상세조회 SQL
SELECT 
    BOARD_NO, 
    BOARD_TITLE, 
    BOARD_CONTENT, 
    BOARD_CODE, 
    READ_COUNT,
    MEMBER_NICKNAME, 
    PROFILE_IMG,
    TO_CHAR(BOARD_WRITE_DATE, 'YYYY"년"MM"월"DD"일"HH24:MI:SS') AS BOARD_WRITE_DATE,
    TO_CHAR(BOARD_UPDATE_DATE, 'YYYY"년"MM"월"DD"일"HH24:MI:SS') AS BOARD_UPDATE_DATE
    , (SELECT COUNT(*)
    FROM "BOARD_LIKE"
    WHERE BOARD_NO = 2000) AS LIKE_COUNT ,
    
    (SELECT IMG_PATH || IMG_RENAME 
    FROM "BOARD_IMG"
    WHERE BOARD_NO = 2000
    AND IMG_ORDER = 0) AS THUMBNAIL ,
    
    (SELECT COUNT(*)
    FROM "BOARD_LIKE"
    WHERE BOARD_NO = 2000
    AND MEMBER_NO = 4) LIKE_CHECK
FROM 
    BOARD
JOIN 
    MEMBER USING(MEMBER_NO)
WHERE 
    BOARD_DEL_FL = 'N'
    AND BOARD_NO = 2000
      AND BOARD_CODE = 1;

-- 상세조회 하고있는 게시글의 이미지 목록 조회 SQL
SELECT * FROM "BOARD_IMG"
WHERE BOARD_NO = 2000
ORDER BY IMG_ORDER;



-- 상세조회하고있는 게시글의 댓글 목록조회 SQL
-- 댓글목록 SQL

-- LEVEL : ORACLE 에서 제공하는 계층형 데이터 조회할때 "레벨"에 있는지 알려주는
-- 가상의 컬럼

SELECT LEVEL, C.* FROM
	    
      (SELECT COMMENT_NO, COMMENT_CONTENT,
	    TO_CHAR(COMMENT_WRITE_DATE, 'YYYY"년" MM"월" DD"일" HH24"시" MI"분" SS"초"') COMMENT_WRITE_DATE,
	    BOARD_NO, MEMBER_NO, MEMBER_NICKNAME, PROFILE_IMG, PARENT_COMMENT_NO, COMMENT_DEL_FL
	    FROM "COMMENT"
	    JOIN MEMBER USING(MEMBER_NO)
	    WHERE BOARD_NO = 2000) C
	    
WHERE COMMENT_DEL_FL = 'N'

OR 0 != (SELECT COUNT(*) 
         FROM "COMMENT" SUB
				 WHERE SUB.PARENT_COMMENT_NO = C.COMMENT_NO
				 AND COMMENT_DEL_FL = 'N')
				
             START WITH PARENT_COMMENT_NO IS NULL
             CONNECT BY PRIOR COMMENT_NO = PARENT_COMMENT_NO
             ORDER SIBLINGS BY COMMENT_NO;

--쉽지않다 ... SIBLINGS 형제관계 , c => 인라인뷰 를 이용하여 가상테이블을 만듬
--OR 0 != (SELECT COUNT(*) FROM "COMMENT" SUB WHERE SUB.PARENT_COMMENT_NO = C.COMMENT_NO ...
 -- .. . 부모댓글은 삭제되었는데 자식댓글은 남아있을때도 조회하겟다는 의미
				
				
SELECT * FROM BOARD_IMG;




-------------------------------------------------------

/* 좋아요 테이블(BOARD_LIKE) 샘플 데이터 추가 */
INSERT INTO "BOARD_LIKE"
VALUES(4, 2000); -- 2번 회원이 2003번 글에 좋아요를 클릭함

COMMIT;

----------------------------------------------------------

-- SEQ_IMG_NO 시퀀스의 다음 값을 반환하는 함수 생성

-- 전체 드래그 ALT+X
CREATE OR REPLACE FUNCTION NEXT_IMG_NO
-- 반환형
RETURN NUMBER
-- 사용할 변수
IS IMG_NO NUMBER;
BEGIN 
	SELECT SEQ_IMG_NO.NEXTVAL 
	INTO IMG_NO
	FROM DUAL;

	RETURN IMG_NO;
END;
-- 여기까지 긁기

SELECT NEXT_IMG_NO() FROM DUAL;


----------------------------------------------------------
/* 채팅 */
CREATE TABLE "CHATTING_ROOM" (
	"CHATTING_ROOM_NO"	NUMBER		NOT NULL,
	"CREATE_DATE"	DATE	DEFAULT CURRENT_DATE	NOT NULL,
	"OPEN_MEMBER"	NUMBER		NOT NULL,
	"PARTICIPANT"	NUMBER		NOT NULL
);

COMMENT ON COLUMN "CHATTING_ROOM"."CHATTING_ROOM_NO" IS '채팅방 번호';
COMMENT ON COLUMN "CHATTING_ROOM"."CREATE_DATE" IS '채팅방 생성일';
COMMENT ON COLUMN "CHATTING_ROOM"."OPEN_MEMBER" IS '개설자 회원 번호';
COMMENT ON COLUMN "CHATTING_ROOM"."PARTICIPANT" IS '참여자 회원 번호';

CREATE TABLE "MESSAGE" (
	"MESSAGE_NO"	NUMBER		NOT NULL,
	"MESSAGE_CONTENT"	VARCHAR2(4000)		NOT NULL,
	"READ_FL"	CHAR(1)	DEFAULT 'N'	NOT NULL,
	"SEND_TIME"	DATE	DEFAULT CURRENT_DATE	NOT NULL,
	"SENDER_NO"	NUMBER		NOT NULL,
	"CHATTING_ROOM_NO"	NUMBER		NOT NULL
);

COMMENT ON COLUMN "MESSAGE"."MESSAGE_NO" IS '메시지 번호';
COMMENT ON COLUMN "MESSAGE"."MESSAGE_CONTENT" IS '메시지 내용';
COMMENT ON COLUMN "MESSAGE"."READ_FL" IS '읽음여부Y/N';
COMMENT ON COLUMN "MESSAGE"."SEND_TIME" IS '메시지 보낸 시간';
COMMENT ON COLUMN "MESSAGE"."SENDER_NO" IS '메시지 보낸 회원 번호';
COMMENT ON COLUMN "MESSAGE"."CHATTING_ROOM_NO" IS '채팅방 번호';

ALTER TABLE "CHATTING_ROOM" ADD CONSTRAINT "PK_CHATTING_ROOM" PRIMARY KEY (
	"CHATTING_ROOM_NO"
);

ALTER TABLE "MESSAGE" ADD CONSTRAINT "PK_MESSAGE" PRIMARY KEY (
	"MESSAGE_NO"
);

ALTER TABLE "CHATTING_ROOM" ADD CONSTRAINT "FK_MEMBER_TO_CHATTING_ROOM_1" FOREIGN KEY (
	"OPEN_MEMBER"
)
REFERENCES "MEMBER" (
	"MEMBER_NO"
);

ALTER TABLE "CHATTING_ROOM" ADD CONSTRAINT "FK_MEMBER_TO_CHATTING_ROOM_2" FOREIGN KEY (
	"PARTICIPANT"
)
REFERENCES "MEMBER" (
	"MEMBER_NO"
);

ALTER TABLE "MESSAGE" ADD CONSTRAINT "FK_MEMBER_TO_MESSAGE_1" FOREIGN KEY (
	"SENDER_NO"
)
REFERENCES "MEMBER" (
	"MEMBER_NO"
);

ALTER TABLE "MESSAGE" ADD CONSTRAINT "FK_CHATTING_ROOM_TO_MESSAGE_1" FOREIGN KEY (
	"CHATTING_ROOM_NO"
)
REFERENCES "CHATTING_ROOM" (
	"CHATTING_ROOM_NO"
);


-- 채팅방 번호 생성 시퀀스
CREATE SEQUENCE SEQ_ROOM_NO NOCACHE;

-- 메시지 번호 생성 시퀀스
CREATE SEQUENCE SEQ_MESSAGE_NO NOCACHE;



/* 로그인한 회원이 참여한 채팅방 목록 조회*/
SELECT CHATTING_ROOM_NO
	,(SELECT MESSAGE_CONTENT FROM 
		(SELECT * FROM MESSAGE M2
		WHERE M2.CHATTING_ROOM_NO = R.CHATTING_ROOM_NO
		ORDER BY MESSAGE_NO DESC) 
		WHERE ROWNUM = 1) LAST_MESSAGE
	,TO_CHAR(NVL((SELECT MAX(SEND_TIME) SEND_TIME 
			FROM MESSAGE M
			WHERE R.CHATTING_ROOM_NO  = M.CHATTING_ROOM_NO), CREATE_DATE), 
			'YYYY.MM.DD') SEND_TIME
	,NVL2((SELECT OPEN_MEMBER FROM CHATTING_ROOM R2
		WHERE R2.CHATTING_ROOM_NO = R.CHATTING_ROOM_NO
		AND R2.OPEN_MEMBER = 1),
		R.PARTICIPANT,
		R.OPEN_MEMBER
		) TARGET_NO	
	,NVL2((SELECT OPEN_MEMBER FROM CHATTING_ROOM R2
		WHERE R2.CHATTING_ROOM_NO = R.CHATTING_ROOM_NO
		AND R2.OPEN_MEMBER = 1),
		(SELECT MEMBER_NICKNAME FROM MEMBER WHERE MEMBER_NO = R.PARTICIPANT),
		(SELECT MEMBER_NICKNAME FROM MEMBER WHERE MEMBER_NO = R.OPEN_MEMBER)
		) TARGET_NICKNAME	
	,NVL2((SELECT OPEN_MEMBER FROM CHATTING_ROOM R2
		WHERE R2.CHATTING_ROOM_NO = R.CHATTING_ROOM_NO
		AND R2.OPEN_MEMBER = 1),
		(SELECT PROFILE_IMG FROM MEMBER WHERE MEMBER_NO = R.PARTICIPANT),
		(SELECT PROFILE_IMG FROM MEMBER WHERE MEMBER_NO = R.OPEN_MEMBER)
		) TARGET_PROFILE
	,(SELECT COUNT(*) FROM MESSAGE M 
	WHERE M.CHATTING_ROOM_NO = R.CHATTING_ROOM_NO 
	AND READ_FL = 'N' AND SENDER_NO != 1) NOT_READ_COUNT
	,(SELECT MAX(MESSAGE_NO) SEND_TIME 
	FROM MESSAGE M 
	WHERE R.CHATTING_ROOM_NO  = M.CHATTING_ROOM_NO) MAX_MESSAGE_NO
FROM CHATTING_ROOM R
WHERE OPEN_MEMBER = 1
OR PARTICIPANT = 1
ORDER BY MAX_MESSAGE_NO DESC NULLS LAST;

SELECT * FROM MEMBER;

SELECT * FROM "BOARD" WHERE BOARD_NO = 2005;

---------------------------------------------------------------------------------------



-- semi

------------------------------- SEQUENCE -------------------------------

/* 게시판 종류 번호 */
CREATE SEQUENCE SEQ_BOARD_CODE_NO NOCACHE;

/* 회원 번호 */
CREATE SEQUENCE SEQ_MEMBER_NO NOCACHE;

/* 게시글 이미지 번호 */
CREATE SEQUENCE SEQ_IMG_NO NOCACHE;

/* 방명록 번호 */
CREATE SEQUENCE SEQ_GUEST_BOOK_NO NOCACHE;

/* 게시글 댓글 번호 */
CREATE SEQUENCE SEQ_BOARD_COMMENT_NO NOCACHE;

/* 인증키 구분 번호 */
CREATE SEQUENCE SEQ_KEY_NO NOCACHE;

/* 게시글 번호 */
CREATE SEQUENCE SEQ_BOARD_NO NOCACHE;

----------------------------- CREATE TABLE -----------------------------

-- 게시판 종류 테이블
CREATE TABLE "BOARD_TYPE" (
	"BOARD_CODE"	NUMBER		NOT NULL,
	"BOARD_NAME"	NVARCHAR2(20)	DEFAULT '익명게시판'	NOT NULL,
	"AUTHORITY"	NUMBER	DEFAULT 0	NOT NULL,
	"MEMBER_NO"	NUMBER		NOT NULL
);

-- 게시판 종류 테이블 코멘트
COMMENT ON COLUMN "BOARD_TYPE"."BOARD_CODE" IS '게시판 종류 번호(PK)';
COMMENT ON COLUMN "BOARD_TYPE"."BOARD_NAME" IS '게시판 종류 이름';
COMMENT ON COLUMN "BOARD_TYPE"."AUTHORITY" IS '접근 권한(0: 전체, 1: 일촌)';
COMMENT ON COLUMN "BOARD_TYPE"."MEMBER_NO" IS '회원 번호(FK)';

-- 회원 테이블
CREATE TABLE "MEMBER" (
	"MEMBER_NO"	NUMBER		NOT NULL,
	"MEMBER_EMAIL"	NVARCHAR2(50)		NOT NULL,
	"MEMBER_PW"	NVARCHAR2(100)		NOT NULL,
	"MEMBER_NAME"	NVARCHAR2(10)		NOT NULL,
	"MEMBER_TEL"	CHAR(11)		NOT NULL,
	"MEMBER_ADDRESS"	NVARCHAR2(300)	DEFAULT NULL	NULL,
	"MEMBER_IMG"	VARCHAR2(300)		NULL,
	"MEMBER_INTRO"	NVARCHAR2(50)	DEFAULT '자기소개가 없습니다.'	NOT NULL,
	"HOME_TITLE"	NVARCHAR2(20)	DEFAULT '님의 미니홈피'	NOT NULL,
	"VISITOR_TOTAL"	NUMBER	DEFAULT 0	NOT NULL,
	"ENROLL_DATE"	DATE	DEFAULT SYSDATE	NOT NULL,
	"MEMBER_DEL_FL"	CHAR(1)	DEFAULT 'N'	NOT NULL,
	"KAKAO_ACCESS_TOKEN"	VARCHAR2(300)		NULL
);

-- 회원 테이블 코멘트
COMMENT ON COLUMN "MEMBER"."MEMBER_NO" IS '회원 번호(PK)';
COMMENT ON COLUMN "MEMBER"."MEMBER_EMAIL" IS '회원 이메일(ID)';
COMMENT ON COLUMN "MEMBER"."MEMBER_PW" IS '회원 비밀번호(암호화)';
COMMENT ON COLUMN "MEMBER"."MEMBER_NAME" IS '회원 이름';
COMMENT ON COLUMN "MEMBER"."MEMBER_TEL" IS '회원 전화번호';
COMMENT ON COLUMN "MEMBER"."MEMBER_ADDRESS" IS '회원 주소';
COMMENT ON COLUMN "MEMBER"."MEMBER_IMG" IS '회원 이미지(대문 이미지)';
COMMENT ON COLUMN "MEMBER"."MEMBER_INTRO" IS '회원 소개글';
COMMENT ON COLUMN "MEMBER"."HOME_TITLE" IS '미니 홈피명';
COMMENT ON COLUMN "MEMBER"."VISITOR_TOTAL" IS '미니 홈피 총 방문자 수';
COMMENT ON COLUMN "MEMBER"."ENROLL_DATE" IS '회원가입일';
COMMENT ON COLUMN "MEMBER"."MEMBER_DEL_FL" IS '탈퇴 여부(Y/N)';
COMMENT ON COLUMN "MEMBER"."KAKAO_ACCESS_TOKEN" IS '카카오 액세스 토큰';

-- 게시글 좋아요 테이블
CREATE TABLE "BOARD_LIKE" (
	"MEMBER_NO"	NUMBER		NOT NULL,
	"BOARD_NO"	NUMBER		NOT NULL
);

-- 게시글 좋아요 테이블 코멘트
COMMENT ON COLUMN "BOARD_LIKE"."MEMBER_NO" IS '회원 번호(PFK)';
COMMENT ON COLUMN "BOARD_LIKE"."BOARD_NO" IS '게시글 번호(PFK)';

-- 일촌평 테이블
CREATE TABLE "ILCHON_COMMENT" (
	"FROM_MEMBER_NO"	NUMBER		NOT NULL,
	"TO_MEMBER_NO"	NUMBER		NOT NULL,
	"ILCHON_COMMENT_CONTENT"	NVARCHAR2(30)		NOT NULL,
	"ILCHON_WRITE_DATE"	DATE	DEFAULT SYSDATE	NOT NULL
);

-- 일촌평 테이블 코멘트
COMMENT ON COLUMN "ILCHON_COMMENT"."FROM_MEMBER_NO" IS '내 회원 번호(PFK)';
COMMENT ON COLUMN "ILCHON_COMMENT"."TO_MEMBER_NO" IS '상대 회원 번호(PFK)';
COMMENT ON COLUMN "ILCHON_COMMENT"."ILCHON_COMMENT_CONTENT" IS '일촌평 내용';
COMMENT ON COLUMN "ILCHON_COMMENT"."ILCHON_WRITE_DATE" IS '일촌평 쓴 날짜';

-- 프로필 테이블
CREATE TABLE "PROFILE" (
	"MEMBER_NO"	NUMBER		NOT NULL,
	"IMG_PATH"	VARCHAR2(200)		NULL,
	"IMG_ORIGINAL_NAME"	NVARCHAR2(50)		NULL,
	"IMG_RENAME"	NVARCHAR2(50)		NULL,
	"PROFILE_CONTENT"	NVARCHAR2(150)		NULL
);

-- 프로필 테이블 코멘트
COMMENT ON COLUMN "PROFILE"."MEMBER_NO" IS '회원 번호(PK)';
COMMENT ON COLUMN "PROFILE"."IMG_PATH" IS '이미지 요청 경로';
COMMENT ON COLUMN "PROFILE"."IMG_ORIGINAL_NAME" IS '이미지 원본명';
COMMENT ON COLUMN "PROFILE"."IMG_RENAME" IS '이미지 변경명';
COMMENT ON COLUMN "PROFILE"."PROFILE_CONTENT" IS '프로필 내용';

-- 게시글 이미지 테이블
CREATE TABLE "BOARD_IMG" (
	"IMG_NO"	NUMBER		NOT NULL,
	"IMG_PATH"	VARCHAR2(200)		NOT NULL,
	"IMG_ORIGINAL_NAME"	NVARCHAR2(50)		NOT NULL,
	"IMG_RENAME"	NVARCHAR2(50)		NOT NULL,
	"IMG_ORDER"	NUMBER		NULL,
	"BOARD_NO"	NUMBER		NOT NULL
);

-- 게시글 이미지 테이블 코멘트
COMMENT ON COLUMN "BOARD_IMG"."IMG_NO" IS '이미지 번호(PK)';
COMMENT ON COLUMN "BOARD_IMG"."IMG_PATH" IS '이미지 요청 경로';
COMMENT ON COLUMN "BOARD_IMG"."IMG_ORIGINAL_NAME" IS '이미지 원본명';
COMMENT ON COLUMN "BOARD_IMG"."IMG_RENAME" IS '이미지 변경명';
COMMENT ON COLUMN "BOARD_IMG"."IMG_ORDER" IS '이미지 순서';
COMMENT ON COLUMN "BOARD_IMG"."BOARD_NO" IS '게시글 번호(FK)';

-- 방명록 테이블
CREATE TABLE "GUEST_BOOK" (
	"GUEST_BOOK_NO"	NUMBER		NOT NULL,
	"GUEST_BOOK_CONTENT"	NVARCHAR2(150)		NOT NULL,
	"GUEST_BOOK_WRITE_DATE"	DATE	DEFAULT SYSDATE	NOT NULL,
	"OWNER_NO"	NUMBER		NOT NULL,
	"VISITOR_NO"	NUMBER		NOT NULL
);

-- 방명록 테이블 코멘트
COMMENT ON COLUMN "GUEST_BOOK"."GUEST_BOOK_NO" IS '방명록 번호(PK)';
COMMENT ON COLUMN "GUEST_BOOK"."GUEST_BOOK_CONTENT" IS '방명록 내용';
COMMENT ON COLUMN "GUEST_BOOK"."GUEST_BOOK_WRITE_DATE" IS '방명록 작성일';
COMMENT ON COLUMN "GUEST_BOOK"."OWNER_NO" IS '홈피 주인 회원 번호(FK)';
COMMENT ON COLUMN "GUEST_BOOK"."VISITOR_NO" IS '방문 회원 번호(FK)';

-- 플레이 리스트 테이블
CREATE TABLE "PLAYLIST" (
	"MEMBER_NO"	NUMBER		NOT NULL,
	"URL"	VARCHAR2(150)		NULL
);

-- 플레이 리스트 테이블 코멘트
COMMENT ON COLUMN "PLAYLIST"."MEMBER_NO" IS '회원 번호(PFK)';
COMMENT ON COLUMN "PLAYLIST"."YOUTUBE_URL" IS '유튜브 URL';

-- 게시글 댓글 테이블
CREATE TABLE "BOARD_COMMENT" (
	"BOARD_COMMENT_NO"	NUMBER		NOT NULL,
	"BOARD_COMMENT_CONTENT"	NVARCHAR2(4000)		NOT NULL,
	"BOARD_COMMENT_WRITE_DATE"	DATE	DEFAULT SYSDATE	NOT NULL,
	"BOARD_COMMENT_DEL_FL"	CHAR(1)	DEFAULT 'N'	NOT NULL,
	"BOARD_NO"	NUMBER		NOT NULL,
	"MEMBER_NO"	NUMBER		NOT NULL,
	"PARENT_COMMENT_NO"	NUMBER	DEFAULT NULL	NULL
);

-- 게시글 댓글 테이블 코멘트
COMMENT ON COLUMN "BOARD_COMMENT"."BOARD_COMMENT_NO" IS '댓글 번호(PK)';
COMMENT ON COLUMN "BOARD_COMMENT"."BOARD_COMMENT_CONTENT" IS '댓글 내용';
COMMENT ON COLUMN "BOARD_COMMENT"."BOARD_COMMENT_WRITE_DATE" IS '댓글 작성일';
COMMENT ON COLUMN "BOARD_COMMENT"."BOARD_COMMENT_DEL_FL" IS '댓글 삭제 여부(Y/N)';
COMMENT ON COLUMN "BOARD_COMMENT"."BOARD_NO" IS '게시글 번호(FK)';
COMMENT ON COLUMN "BOARD_COMMENT"."MEMBER_NO" IS '회원 번호(PK)';
COMMENT ON COLUMN "BOARD_COMMENT"."PARENT_COMMENT_NO" IS '부모 댓글 번호(FK)';

-- 인증 번호 테이블
CREATE TABLE "AUTH_KEY" (
	"KEY_NO"	NUMBER		NOT NULL,
	"EMAIL"	NVARCHAR2(50)		NOT NULL,
	"AUTH_KEY"	CHAR(6)		NOT NULL,
	"CREATE_TIME"	DATE	DEFAULT SYSDATE	NOT NULL
);

-- 인증 번호 테이블 코멘트
COMMENT ON COLUMN "AUTH_KEY"."KEY_NO" IS '인증키 구분 번호(PK)';
COMMENT ON COLUMN "AUTH_KEY"."EMAIL" IS '인증 이메일';
COMMENT ON COLUMN "AUTH_KEY"."AUTH_KEY" IS '인증 번호';
COMMENT ON COLUMN "AUTH_KEY"."CREATE_TIME" IS '인증 번호 생성 시간';

-- 게시글 테이블
CREATE TABLE "BOARD" (
	"BOARD_NO"	NUMBER		NOT NULL,
	"BOARD_TITLE"	NVARCHAR2(50)		NOT NULL,
	"BOARD_CONTENT"	NVARCHAR2(4000)		NOT NULL,
	"BOARD_WRITE_DATE"	DATE	DEFAULT SYSDATE	NOT NULL,
	"BOARD_UPDATE_DATE"	DATE		NULL,
	"READ_COUNT"	NUMBER	DEFAULT 0	NOT NULL,
	"BOARD_DEL_FL"	CHAR(1)	DEFAULT 'N'	NOT NULL,
	"BOARD_CODE"	NUMBER		NOT NULL,
	"MEMBER_NO"	NUMBER		NOT NULL
);

-- 게시글 테이블 코멘트
COMMENT ON COLUMN "BOARD"."BOARD_NO" IS '게시글 번호(PK)';
COMMENT ON COLUMN "BOARD"."BOARD_TITLE" IS '게시글 제목';
COMMENT ON COLUMN "BOARD"."BOARD_CONTENT" IS '게시글 내용';
COMMENT ON COLUMN "BOARD"."BOARD_WRITE_DATE" IS '게시글 작성일';
COMMENT ON COLUMN "BOARD"."BOARD_UPDATE_DATE" IS '게시글 수정일';
COMMENT ON COLUMN "BOARD"."READ_COUNT" IS '조회수';
COMMENT ON COLUMN "BOARD"."BOARD_DEL_FL" IS '게시글 삭제 여부(Y/N)';
COMMENT ON COLUMN "BOARD"."BOARD_CODE" IS '게시판 종류 번호(FK)';
COMMENT ON COLUMN "BOARD"."MEMBER_NO" IS '회원 번호(PK)';

-- 일촌 테이블
CREATE TABLE "ILCHON" (
	"FROM_MEMBER_NO"	NUMBER		NOT NULL,
	"TO_MEMBER_NO"	NUMBER		NOT NULL,
	"FROM_NICKNAME"	NVARCHAR2(8)		NOT NULL,
	"TO_NICKNAME"	NVARCHAR2(8)		NOT NULL,
	"IS_ILCHON"	CHAR(1)	DEFAULT 'N'	NOT NULL
);

-- 일촌 테이블 코멘트
COMMENT ON COLUMN "ILCHON"."FROM_MEMBER_NO" IS '내 회원 번호(PFK)';
COMMENT ON COLUMN "ILCHON"."TO_MEMBER_NO" IS '상대 회원 번호(PFK)';
COMMENT ON COLUMN "ILCHON"."FROM_NICKNAME" IS '내 일촌명';
COMMENT ON COLUMN "ILCHON"."TO_NICKNAME" IS '상대 일촌명';
COMMENT ON COLUMN "ILCHON"."IS_ILCHON" IS '일촌 여부';

-------------------------------------- PK --------------------------------------

-- 게시판 종류 테이블 (PK)
ALTER TABLE "BOARD_TYPE" ADD CONSTRAINT "PK_BOARD_TYPE" PRIMARY KEY (
	"BOARD_CODE"
);

-- 회원 테이블 (PK)
ALTER TABLE "MEMBER" ADD CONSTRAINT "PK_MEMBER" PRIMARY KEY (
	"MEMBER_NO"
);

-- 게시글 좋아요 테이블 (복합 PK)
ALTER TABLE "BOARD_LIKE" ADD CONSTRAINT "PK_BOARD_LIKE" PRIMARY KEY (
	"MEMBER_NO",
	"BOARD_NO"
);

-- 일촌평 테이블 (복합 PK)
ALTER TABLE "ILCHON_COMMENT" ADD CONSTRAINT "PK_ILCHON_COMMENT" PRIMARY KEY (
	"FROM_MEMBER_NO",
	"TO_MEMBER_NO"
);

-- 프로필 테이블 (PK)
ALTER TABLE "PROFILE" ADD CONSTRAINT "PK_PROFILE" PRIMARY KEY (
	"MEMBER_NO"
);

-- 게시글 이미지 테이블 (PK)
ALTER TABLE "BOARD_IMG" ADD CONSTRAINT "PK_BOARD_IMG" PRIMARY KEY (
	"IMG_NO"
);

-- 방명록 테이블 (PK)
ALTER TABLE "GUEST_BOOK" ADD CONSTRAINT "PK_GUEST_BOOK" PRIMARY KEY (
	"GUEST_BOOK_NO"
);

-- 플레이리스트 테이블 (PK)
ALTER TABLE "PLAYLIST" ADD CONSTRAINT "PK_PLAYLIST" PRIMARY KEY (
	"MEMBER_NO"
);

-- 게시글 댓글 테이블 (PK)
ALTER TABLE "BOARD_COMMENT" ADD CONSTRAINT "PK_BOARD_COMMENT" PRIMARY KEY (
	"BOARD_COMMENT_NO"
);

-- 인증 번호 테이블 (PK)
ALTER TABLE "AUTH_KEY" ADD CONSTRAINT "PK_AUTH_KEY" PRIMARY KEY (
	"KEY_NO"
);

-- 게시글 테이블 (PK)
ALTER TABLE "BOARD" ADD CONSTRAINT "PK_BOARD" PRIMARY KEY (
	"BOARD_NO"
);

-- 일촌 테이블 (복합 PK)
ALTER TABLE "ILCHON" ADD CONSTRAINT "PK_ILCHON" PRIMARY KEY (
	"FROM_MEMBER_NO", 
	"TO_MEMBER_NO"
);

-------------------------------------- FK --------------------------------------

-- 게시판 종류 테이블 (FK)
ALTER TABLE "BOARD_TYPE" ADD CONSTRAINT "FK_MEMBER_TO_BOARD_TYPE_1" FOREIGN KEY (
	"MEMBER_NO"
)
REFERENCES "MEMBER" (
	"MEMBER_NO"
);

-- 게시글 좋아요 테이블 (FK)
ALTER TABLE "BOARD_LIKE" ADD CONSTRAINT "FK_MEMBER_TO_BOARD_LIKE_1" FOREIGN KEY (
	"MEMBER_NO"
)
REFERENCES "MEMBER" (
	"MEMBER_NO"
);

ALTER TABLE "BOARD_LIKE" ADD CONSTRAINT "FK_BOARD_TO_BOARD_LIKE_1" FOREIGN KEY (
	"BOARD_NO"
)
REFERENCES "BOARD" (
	"BOARD_NO"
) ON DELETE CASCADE;

-- 일촌평 테이블 (FK)
ALTER TABLE "ILCHON_COMMENT" ADD CONSTRAINT "FK_ILCHON_TO_ILCHON_COMMENT" FOREIGN KEY (
	"FROM_MEMBER_NO", "TO_MEMBER_NO"
)
REFERENCES "ILCHON" (
	"FROM_MEMBER_NO", "TO_MEMBER_NO"
) ON DELETE CASCADE;

-- 프로필 테이블 (FK)
ALTER TABLE "PROFILE" ADD CONSTRAINT "FK_MEMBER_TO_PROFILE_1" FOREIGN KEY (
	"MEMBER_NO"
)
REFERENCES "MEMBER" (
	"MEMBER_NO"
);

-- 게시글 이미지 테이블 (FK)
ALTER TABLE "BOARD_IMG" ADD CONSTRAINT "FK_BOARD_TO_BOARD_IMG_1" FOREIGN KEY (
	"BOARD_NO"
)
REFERENCES "BOARD" (
	"BOARD_NO"
) ON DELETE CASCADE;

-- 방명록 테이블 (FK)
ALTER TABLE "GUEST_BOOK" ADD CONSTRAINT "FK_MEMBER_TO_GUEST_BOOK_1" FOREIGN KEY (
	"OWNER_NO"
)
REFERENCES "MEMBER" (
	"MEMBER_NO"
);

ALTER TABLE "GUEST_BOOK" ADD CONSTRAINT "FK_MEMBER_TO_GUEST_BOOK_1" FOREIGN KEY (
	"VISITOR_NO"
)
REFERENCES "MEMBER" (
	"MEMBER_NO"
);

-- 플레이리스트 테이블 (FK)
ALTER TABLE "PLAYLIST" ADD CONSTRAINT "FK_MEMBER_TO_PLAYLIST_1" FOREIGN KEY (
	"MEMBER_NO"
)
REFERENCES "MEMBER" (
	"MEMBER_NO"
);

-- 게시글 댓글 테이블 (FK)
ALTER TABLE "BOARD_COMMENT" ADD CONSTRAINT "FK_BOARD_TO_BOARD_COMMENT_1" FOREIGN KEY (
	"BOARD_NO"
)
REFERENCES "BOARD" (
	"BOARD_NO"
) ON DELETE CASCADE;

ALTER TABLE "BOARD_COMMENT" ADD CONSTRAINT "FK_MEMBER_TO_BOARD_COMMENT_1" FOREIGN KEY (
	"MEMBER_NO"
)
REFERENCES "MEMBER" (
	"MEMBER_NO"
);

ALTER TABLE "BOARD_COMMENT" ADD CONSTRAINT "FK_BOARD_COMMENT_TO_BOARD_COMMENT_1" FOREIGN KEY (
	"PARENT_COMMENT_NO"
)
REFERENCES "BOARD_COMMENT" (
	"BOARD_COMMENT_NO"
);

-- 게시글 테이블 (FK)
ALTER TABLE "BOARD" ADD CONSTRAINT "FK_BOARD_TYPE_TO_BOARD_1" FOREIGN KEY (
	"BOARD_CODE"
)
REFERENCES "BOARD_TYPE" (
	"BOARD_CODE"
) ON DELETE CASCADE;

ALTER TABLE "BOARD" ADD CONSTRAINT "FK_MEMBER_TO_BOARD_1" FOREIGN KEY (
	"MEMBER_NO"
)
REFERENCES "MEMBER" (
	"MEMBER_NO"
);

-- 일촌 테이블 (FK)
ALTER TABLE "ILCHON" ADD CONSTRAINT "FK_MEMBER_TO_ILCHON_1" FOREIGN KEY (
	"FROM_MEMBER_NO"
)
REFERENCES "MEMBER" (
	"MEMBER_NO"
);

ALTER TABLE "ILCHON" ADD CONSTRAINT "FK_MEMBER_TO_ILCHON_2" FOREIGN KEY (
	"TO_MEMBER_NO"
)
REFERENCES "MEMBER" (
	"MEMBER_NO"
);

------------------------------------ CHECK -------------------------------------

-- 회원 탈퇴 여부 (CK)
ALTER TABLE "MEMBER" ADD CONSTRAINT "MEMBER_DEL_FL_CHECK" CHECK (
	"MEMBER_DEL_FL" IN ('Y', 'N')
);

-- 게시글 댓글 삭제 여부 (CK)
ALTER TABLE "BOARD_COMMENT" ADD CONSTRAINT "BOARD_COMMENT_DEL_FL_CHECK" CHECK (
	"BOARD_COMMENT_DEL_FL" IN ('Y', 'N')
);

-- 게시글 삭제 여부 (CK)
ALTER TABLE "BOARD" ADD CONSTRAINT "BOARD_COMMENT_DEL_FL_CHECK" CHECK (
	"BOARD_DEL_FL" IN ('Y', 'N')
);

-- 일촌 여부 (CK)
ALTER TABLE "ILCHON" ADD CONSTRAINT "IS_ILCHON" CHECK (
	"IS_ILCHON" IN ('Y', 'N')
);



